version: "3.8"

services:
  # .pinkyring=POSTGRES
  postgres:
    container_name: postgres
    image: postgres:15.3-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data

  # https://www.pgadmin.org/docs/pgadmin4/7.1/index.html
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.1
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - 5050:80
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_started
  # .pinkyring=POSTGRES.end

  # .pinkyring=REDIS
  redis:
    container_name: redis
    image: redis:7.0.11-alpine
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis:/data
  # .pinkyring=REDIS.end

  # .pinkyring=MONGO
  mongo:
    container_name: mongo
    image: mongo:7.0.5
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db
      - mongoConfig:/data/configdb

  # default auth credentials?: admin:pass
  mongo-express:
    container_name: mongo-express
    image: mongo-express:1.0.2-20-alpine3.19
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    ports:
      - 8081:8081
    volumes:
      - mongo-express:/data/db
    depends_on:
      mongo:
        condition: service_started
  # .pinkyring=MONGO.end

# find which volumes need to be created:
# docker image inspect {imageid or name:tag} --format {{.Config.Volumes}}
volumes:
  # .pinkyring=POSTGRES
  postgres:
  pgadmin:
  # .pinkyring=POSTGRES.end
  # .pinkyring=REDIS
  redis:
  # .pinkyring=REDIS.end
  # .pinkyring=MONGO
  mongo:
  mongoConfig:
  mongo-express:
  # .pinkyring=MONGO.end
